#!/usr/bin/python2
# -*- coding: utf-8 -*-
# version: 20080423
# By Dennis Drescher (dennis_drescher at sil.org)

# This script has been tested on Python 2.5.1 (Ubuntu)
# it may not work right with earlier versions.

#############################################################
################ Description/Documentation ##################
#############################################################

# One script to rule them all. This is the mother script of
# the whole system. This script will drive all processes and
# keep track of what happens in the project log in each
# respective project.

# History:
# 20080613 - djd - Initial draft
# 20081023 - djd - Refactor .project.conf structure changes
# 20081028 - djd - Removed system logging. Only using
#        process logging now.


#############################################################
######################### Load Modules ######################
#############################################################
# Firstly, import all the standard Python modules we need for
# this process and set the base path

import sys, os, codecs, shutil, operator


basePath = os.environ.get('PTXPLUS_BASE')
if not basePath :
	basePath = "/usr/share/xetex-ptxplus"
	os.environ['PTXPLUS_BASE'] = basePath

# Before we get started we need to do some preliminary
# tests to see what the environment we are starting in
# looks like. That will determine where we go from here.

# Set our paths to application resources
sys.path.insert(0, basePath + '/bin/python')
sys.path.insert(0, basePath + '/bin/python/lib_system')

# No mater what, we will need tools to work with.
import tools

projectType = tools.getProjectType()

# Examine our command line, I'm thinking there will be
# a max of 4. More than that there is a problem. The first
# is always the script name.
command = ""
subCommandOne = ""
if len(sys.argv) > 1 :
	c = 0
	for arg in sys.argv :
		if c > 0 :
			if c == 1 :
				command = arg.lower()
			elif c == 2 :
				subCommandOne = arg.lower()
			elif c == 3 :
				# This is probably a path name, don't use .lower()
				subCommandTwo = arg
		c += 1
else :
	command = "manage"


# Context sensitive stuff libraries. In theory this
# should only do one insert as we would only be in
# one type of a project at a time.
for pubType in tools.getSystemSettingsObject()['System']['pubTypeList'] :
	if projectType == pubType :
		sys.path.insert(0, basePath + '/bin/python/lib_' + pubType)


# Import supporting local classes if we already have project going.
# We don't want to do this for a new project. Instantiate classes
# right away too.
if projectType in tools.getSystemSettingsObject()['System']['pubTypeList'] :
	from log_manager import *
	log_manager = LogManager()
	from error_manager import *
	error_manage = ErrorManager()

# We want to see one valid arguments given. However, that
# may not happen so this script is all about testing the
# arguments given and getting things directed to the right
# place.


if command == "manage" :
	tools.userMessage("\n\t\tWelcome to XeTeX-ptxplus!\n")

else :
	# FIXME: Right now we hard code for publication types but
	# this needs to be changed to be more generic at some point.

	# The second argv is normally the file name or book ID in the context of Scripture
	if projectType == 'scripture' :
		bkid = ""
		# Creat a list of component keys that keep the binding order but do not have
		# any duplicate items in it.
		componentScripture = tools.dedupList(reduce(operator.add, tools.getSettingsObject()['Format']['BindingGroups'].itervalues(), []))

		# This part only works if we are processing Scripture components (books with IDs)
		if len(componentScripture) > 0 :
			for book in componentScripture :
				# We will lc that for consistency
				if sys.argv[1].lower() == book.lower() :
					bkid = sys.argv[1].lower()

		# If we found an argv with an lc bkid then that becomes the command
		if bkid != "" :
			command = bkid
		# Otherwise we'll just read it in raw
		else :
			command = sys.argv[1]

	elif projectType == 'dictionary' :
		tools.userMessage("Sorry dictionary publishing is not supported (yet).\n")

	else :
		command = sys.argv[1]


#############################################################
################# Define Script functions ###################
#############################################################

def setupNewProject () :
	'''Looks like we need to setup a new project. A new project will be
		setup in the CWD. If that isn't right, oh well, the user should
		pay more attention. :-)'''

	# Send out the make new project command
	mod = __import__('make_new_project')

	# I really want to use hard paths in context
	# If it is a dot we assume cwd, otherwise we
	# test to be sure.
	if subCommandTwo == '.' :
		newProjDir = os.getcwd()
	else :
		newProjDir = os.getcwd() + '/' + subCommandTwo
		if not os.access(os.getcwd() + '/' + subCommandTwo, os.W_OK) :
			os.mkdir(newProjDir)

	# Send it off to process (we assume that subCommandOne contains the project type)
	mod.doIt(subCommandOne, newProjDir)


def restoreFromBackup () :
	'''Restore a project from the last back up.'''

	# Check to see if the backup file exists
	if tools.isBackedUp() == True :
		mod = __import__("restore_project")
		mod.doIt()
	else :
		tools.userMessage("ERROR: This project could not be restored from backup. No backup file found or project does not exist.")


def importProject () :
	'''Import a new project from the archive area.'''

	# This should just go to where the archives are kept and bring back a list for
	# the user to choose from. For now we'll just use a path and file name so we
	# can point to anything.
	if len(sys.argv) < 3 :
		archiveFile = tools.userInput('REQUEST: Please enter the path and filename of the archive file to import: ')
	else :
		archiveFile = sys.argv[2]

	mod = __import__("import_project")
	mod.doIt(archiveFile)


def archiveProject () :
	'''Do an archive of any project. If a file name argument is passed we know
		the ptxplus-manager is initiating the call. If no file name is sent
		then it is a blind call from the ptxplus program and will use default
		settings to produce an archive file in the Archive folder.'''

	if len(sys.argv) < 3 :
		fileName = tools.getProjectID()
	else :
		fileName = sys.argv[2]

	mod = __import__("archive_project")
	mod.doIt(fileName)


def backupProject () :
	'''Do a simple backup of the current project.'''

	mod = __import__("backup_project")
	tools.userMessage("\nINFO: Backing up project, please wait...")
	mod.doIt()

def openProject () :
	'''This simply provides some feedback to the user
		when a project is opened.'''

	tools.userMessage("INFO: Opening project at: \t" + os.getcwd())



#############################################################
################# Main Body of the Script ###################
#############################################################

errorCode = ''
noCommandMsg = "Sorry, no valid command was given. Try again."

if command == "manage" :
	# In this instance we want to just call the GUI manager and release control cleanly
	# We will make this generic enough to call a different manager gui
	head, tail = os.path.split(sys.argv[0])
	os.execl(basePath + "/bin/python/ptxplus-manager/" + tail + "-manager", "")

elif command == "help" :
	# We have to help the user get started so this will allow us to call help
	# even if a project is not open.
	os.system('zim ' + basePath + '/resources/Documentation/Help/Home.txt')

elif command == "about" :
	# Give the user an "about" window even if not in a project.
	os.system('zim ' + basePath + '/resources/Documentation/Help/ About.txt')

elif command == "version" :
	# Give the user the current system version number
	tools.userMessage('INFO: Current version: ' + tools.getSystemVersion())

elif command == "user" :
	# Set the system user name
		tools.userMessage('INFO: ' + tools.getSystemUser())

elif command == "set-user" :
	# Set the system user name
	try :
		if sys.argv[2] :
			tools.setSystemUser(sys.argv[2])
	except :
		tools.userMessage('ERROR: No user name given, try again.')

elif command == "set-source-home" :
	# Set the source home folder
	try :
		tools.setSystemSourceHome(sys.argv[2])

	except :
		tools.userMessage('ERROR: Problem setting source path, please try again.')

elif command == "example" :
	# This is a special instance of the import function to facilitate
	# running the example project for demonstration purposes.

	try :
		if sys.argv[2] :
			if os.path.isdir(sys.argv[2]) == True :
				os.chdir(sys.argv[2])
			else :
				os.mkdir(sys.argv[2])
				os.chdir(sys.argv[2])

	except :
		os.mkdir("ptxplus-example")
		os.chdir("ptxplus-example")


	mod = __import__("import_project")
	# For now, I've hard coded the path to the example file. Shame on me!
	mod.doIt(basePath + '/resources/Documentation/Help/default_example.tar.gz')

else :
	# This will test to see if we are in the project or not
	# To do system commands we need to be one folder above
	# However, if we find we are in a project folder, then
	# we will perform project processes on that specific project
	if projectType != None :

		# Sort out the commands. These are commands that
		# can be used from inside the project area
		if command == "restore" :
			restoreFromBackup()
		elif command == "backup" :
			backupProject()
		elif command == "archive" :
			archiveProject()
		elif command == "open" :
			openProject()
		elif command == "import" or command == "setup" :
			tools.userMessage('ERROR: Sorry, that command cannot be used in this location.')

		else :

			# So, it looks like we are going to do some work on the project so we
			# should do some tests and even automatic repairs and updates.

			# Right off we need to tell the user if the project is locked (only if it is locked)

			# Update the .project.conf file if it needs it
			mod = __import__("update_project_settings")
			mod.doIt()

			# Next look to see if the fonts.conf file needs localizing
			from font_manager import *
			font_manager    = FontManager()
			font_manager.localiseFontsConf()

			# Check the project assets
			log_manager.initializeLog("check_assets", "SYS", "", "", "basic")
			tools.taskRunner(log_manager, "check_assets")
			log_manager.closeOutSessionLog()

			# Look for all the global processes that need to be run
			taskList = []
			taskList = log_manager._settings['System']['Processes']['globalProcesses']
			# Get rid of the old error log files.
			error_manager.deleteErrorLogs()
			for thisTask in taskList :

				# Initialize the log manager to do its thing
				log_manager.initializeLog(thisTask, "SYS", "", "", "")

				# For running each process we use one centralized task runner in tools.
				tools.taskRunner(log_manager, thisTask)

				# Close out the process by reporting to the log file
				log_manager.closeOutSessionLog()

			# Anounce any errors we have found
			warn = ""
			if log_manager._warningCount > 0 or log_manager._errorCount > 0 :
				warn = " (Warnings = " + str(log_manager._warningCount) + ")"
				tools.userMessage("ERROR: " + thisTask + " completed with " + str(log_manager._errorCount) + " errors" + warn)

			# At this point we want to check to see if a few certain switches
			# are set to false. If they are, we will run a couple makefile
			# clean up commands before the command that the user is calling
			# for is run. (Right now we are limiting this action to Scripture
			# publications.)
			locked = tools.getSettingsObject()['ProjectText']['SourceText']['LOCKED']
			useIllustrations = tools.getSettingsObject()['Format']['Illustrations']['USE_ILLUSTRATIONS']
			useAdjustments = tools.getSettingsObject()['ProjectText']['WorkingText']['Features']['USE_ADJUSTMENTS']
			if locked == 0 :
				if projectType.lower() == 'scripture' :
					if useIllustrations.lower() == 'false' :
						tools.makefileCommand('picfile-clean-all')
					if useAdjustments.lower() == 'false' :
						tools.makefileCommand('adjfile-clean-all')

			# The project should be ready now
			tools.userMessage("\nINFO: Starting: " +  command)

			# Now send off the command to makefile
			errorCode = tools.makefileCommand(command)

			if errorCode != 0 :
				tools.userMessage("ERROR: Makefile process failed. (Error code: " + str(errorCode) + ")")
			else :
				# If all went well with the makefile process, report any
				# other errors we might have to the terminal
				error_manager.outputProcessErrorReport()

	elif projectType == None :
		# These are system level commands and have to be used
		# from outside the project area
		if command == "setup" :
			setupNewProject()
		elif command == "import" :
			importProject()
		else :
			tools.userMessage("ERROR: There does not seem to be a valid project in this location and the [" + command + "] command is not recognized in this context.")
	else :
		tools.userMessage('ERROR: ' + noCommandMsg)


# All done
if errorCode == 0 or errorCode == '' :
	tools.userMessage("\n\t\tThank you, please come again!\n")
else :
	tools.userMessage("\n\t\tSorry, but please come again!\n")
