<?xml version="1.0" encoding="UTF-8"?>


<!--
File: tipe.xml
Description:
This is the main TIPE system description file.  This contains data to describe
various aspects of the type system.  However, it does not describe projects or
components.

Todo:

-->

<!DOCTYPE root [
  <!ELEMENT root (section+)>
  <!ELEMENT section (name, sectionID, description, setting+)>
  <!ELEMENT setting (name, key, description, type, version*, value)>
  <!ELEMENT name (#PCDATA)>
  <!ELEMENT sectionID (#PCDATA)>
  <!ELEMENT key (#PCDATA)>
  <!ELEMENT description (#PCDATA)>
  <!ELEMENT type (#PCDATA)>
  <!ELEMENT version (#PCDATA)>
  <!ELEMENT value (#PCDATA)>
]>


<root>
    <section>
        <name>System</name>
        <sectionID>System</sectionID>
        <description>These are default system settings. Please do not change.</description>
        <setting>
            <name>System Name</name>
            <key>systemName</key>
            <description>The package/system name (all lower case in the case of package names)</description>
            <type>string</type>
            <value>XeTeX-TIPE</value>
        </setting>
        <setting>
            <name>Version</name>
            <key>systemVersion</key>
            <description>The current version of this system. This is automatically version stamped from the build script.</description>
            <type>string</type>
            <value>0.0.1</value>
        </setting>
        <setting>
            <name>Debugging</name>
            <key>debugging</key>
            <description>If set to true, all events will be recorded to the log file for the purpose of debugging errors.</description>
            <type>boolean</type>
            <value>False</value>
        </setting>
        <setting>
            <name>User Name</name>
            <key>userName</key>
            <description>The name of the person using this system.</description>
            <type>string</type>
            <value>Default User</value>
        </setting>
        <setting>
            <name>About Text</name>
            <key>aboutText</key>
            <description>The description text that will show up in the wiki about file.</description>
            <type>string</type>
            <value>XeTeX-TIPE is a Scripture publishing management system written by the friendly developers at Payap University's Linguistics Institute (Text Unit). TIPE stands for TeX Intitated Publishing Envionment. It is currently being deployed in MSEAG and is under heavy development. Anyone wanting to try this system should be warned that it may not work in their context. However, the underlying principals of the system should work in any long document publishing environment. Therefore the package should be evaluated with that in mind. We welcome input and participation in this project. It is our hope it will be able to serve more than just MSEAG. For questions or more information please write: dennis_drescher@sil.org.</value>
        </setting>
        <setting>
            <name>Interface Language ID Code</name>
            <key>langID</key>
            <description>The language ID code that sets the language to be used in the user interface.</description>
            <type>string</type>
            <value>ENG</value>
        </setting>
        <setting>
            <name>Log File Length</name>
            <key>projLogLineLimit</key>
            <description>This is the maximum number of lines that will be permited to be in the log file. This is necessary because TIPE records all events in one log file.</description>
            <type>integer</type>
            <value>1000</value>
        </setting>
        <setting>
            <name>Makefile Start Parameters</name>
            <key>makeStartParams</key>
            <description>Add extra parameters to the makefile call. This is useful for debugging. Be sure to leave the default command in place or nothing will work.</description>
            <type>string</type>
            <value>make --makefile=</value>
        </setting>
        <setting>
            <name>TIPE Settings Last Edit Date</name>
            <key>tipeEditDate</key>
            <description>Time stamp of when the TIPE settings were last edited.</description>
            <type>string</type>
            <value></value>
        </setting>
        <setting>
            <name>User Settings Last Edit Date</name>
            <key>userEditDate</key>
            <description>Time stamp of when the user settings were last edited.</description>
            <type>string</type>
            <value></value>
        </setting>
        <setting>
            <name>System Initialization Date</name>
            <key>initDate</key>
            <description>Time stamp of when the system was installed.</description>
            <type>string</type>
            <value></value>
        </setting>
    </section>
    <section>
        <name>Commands</name>
        <sectionID>Commands</sectionID>
        <description>This section contains command descriptions for the main TIPE system.</description>
            <section>
                <sectionID>GUIManager</sectionID>
                <description>Start up any number of TIPE GUI managers.</description>
                <setting>
                    <name>Type</name>
                    <key>type</key>
                    <description>The type setting for the command line parser.</description>
                    <type>string</type>
                    <value>manager</value>
                </setting>
                <section>
                    <sectionID>Options</sectionID>
                    <description>Start up options for this command.</description>
                    <section>
                        <sectionID>Option-1</sectionID>
                        <description>First start up option for this command.</description>
                        <setting>
                            <name>Options</name>
                            <key>options</key>
                            <description>The options for this command.</description>
                            <type>list</type>
                            <value>-c, --client</value>
                        </setting>
                        <setting>
                            <name>Action</name>
                            <key>action</key>
                            <description>The option action setting for this command.</description>
                            <type>string</type>
                            <value>store</value>
                        </setting>
                        <setting>
                            <name>Type</name>
                            <key>type</key>
                            <description>The option type setting for this command.</description>
                            <type>string</type>
                            <value>string</value>
                        </setting>
                        <setting>
                            <name>Help</name>
                            <key>help</key>
                            <description>The option help setting for this command.</description>
                            <type>string</type>
                            <value>Start up the TIPE client.</value>
                        </setting>
                    </section>
                </section>
                <section>
                    <sectionID>Evaluation</sectionID>
                    <description>Start up options for this command.</description>
                </section>
            </section>
    </section>


<!--
class GUIManager (Command) :
    '''Start a TIPE GUI manager program'''

    type = "manager"

    def run(self, aProject, args) :
        super(GUIManager, self).run(aProject, args)
        if args[1].lower() == 'standard' :
            aProject.terminal("Sorry, this GUI Manager has not been implemented yet.")
        elif args[1].lower() == 'web' :
            aProject.terminal("Sorry, the web client has not been implemented yet.")
        else :
            aProject.terminal("Not a recognized GUI Manager.")

    def setupOptions(self, parser) :
        self.parser.add_option("-c", "\-\-client", action="store", type="string", help="Start up the TIPE client.")


class CreateProject (Command) :
    '''Create a new project based on a predefined project type.'''

    type = "create"

    def run(self, aProject, args) :
        mod = 'command.CreateProject()'
        super(CreateProject, self).run(aProject, args)
        c = 0; ptype = ''; pname = ''; pid = ''; pdir = ''
        for o in args :
            if o == '-t' or o == '-\-ptype' :
                ptype = args[c+1]
            elif o == '-n' or o == '-\-pname' :
                pname = args[c+1]
            elif o == '-i' or o == '-\-pid' :
                pid = args[c+1]
            elif o == '-d' or o == '-\-pdir' :
                pdir = args[c+1]

            c+=1

        print ptype, pname, pid, pdir
        if aProject.makeProject(ptype, pname, pid, pdir) :
                aProject.writeToLog('MSG', 'Created new project!', mod)

    def setupOptions(self, parser) :
        self.parser.add_option("-t", "-\-ptype", action="store", help="Set the type of project this will be, this is required.")
        self.parser.add_option("-n", "-\-pname", action="store", help="Set the name of project this will be, this is required.")
        self.parser.add_option("-i", "-\-pid", action="store", help="Set the type of project this will be, this is required.")
        self.parser.add_option("-d", "-\-pdir", action="store", help="Create project in this directory, default is current directory.")


class RemoveProject (Command) :
    '''Remove an active project from the system and lock the working conf files.
    If no project ID is given the default is the project in the cwd.  If there
    is no project in the cwd it will fail.'''

    type = "remove"

    def run(self, aProject, args) :
        mod = 'command.RemoveProject()'
        super(RemoveProject, self).run(aProject, args)
        if len(args) :
            pID = args[1]
        else :
            if aProject.projectIDCode != '' :
                pID = aProject.projectIDCode
            else :
                aProject.writeToLog('ERR', 'Project ID code not given or found. Remove project failed.', mod)

        if aProject.removeProject(pID) :
            aProject.writeToLog('MSG', 'Removed project: [' + pID + ']', mod)
        
    def setupOptions(self, parser) :
        self.parser.add_option("-i", "-\-pid", type="string", action="store", help="The ID code of the project to be removed.")


class RestoreProject (Command) :
    '''Restores a project in the dir given. The default dir is cwd.'''

    type = "restore"

    def run(self, aProject, args) :
        mod = 'command.RestoreProject()'
        super(RestoreProject, self).run(aProject, args)
        if len(args) :
            print args[1], os.path.split(os.getcwd())[1]
            
            if os.path.split(os.getcwd())[1] == args[1] :
                pDir = os.getcwd()
            else :
                pDir = os.path.abspath(args[1])
        else :
            pDir = os.getcwd()

        if aProject.restoreProject(pDir) :
            aProject.writeToLog('MSG', 'Restored project at: ' + pDir, mod)
        else :
            aProject.writeToLog('ERR', 'Restoring project at: ' + pDir + ' failed.', mod)

    def setupOptions(self, parser) :
        self.parser.add_option("-d", "-\-dir", type="string", action="store", help="Restore a project in this directory")


-->

</root>

