#!/usr/bin/python
# -*- coding: utf-8 -*-
# version: 20110704
# By Dennis Drescher (dennis_drescher at sil.org)


###############################################################################
######################### Description/Documentation ###########################
###############################################################################

# One script to rule them all.  This is the mother script of the whole system.
# This script will drive all processes and keep track of what happens in the
# project log in each respective project.

# History:
# 20110610 - djd - Start initial draft
# 20110704 - djd - Start refactor for multiple component types
# 20110721 - djd - Added proper command line processing


###############################################################################
################################## Load Modules ###############################
###############################################################################
# Firstly, import all the standard Python modules we need for this process and
# set the base path

import sys, os, codecs, shutil, operator
from datetime import *
from configobj import ConfigObj

# Dumb user home init function
def initUserHome (userHome) :

	# Create user folder components
	tipeFile            = os.path.join(userHome, 'tipe.conf')
	resources           = os.path.join(userHome, 'resources')
	scripts             = os.path.join(userHome, 'resources', 'lib_scripts')
	admin               = os.path.join(userHome, 'resources', 'lib_admin')
	illustrations       = os.path.join(userHome, 'resources', 'lib_illustratons')
	fonts               = os.path.join(userHome, 'resources', 'lib_fonts')
	projs               = os.path.join(userHome, 'resources', 'lib_projTypes')
	comps               = os.path.join(userHome, 'resources', 'lib_compTypes')

	for f in [userHome, resources, scripts, admin, illustrations, fonts, projs, comps] :
		if not os.path.isdir(f) :
			os.mkdir(f)

	# Make the default global tipe.conf for custom environment settings
	if not os.path.isfile(tipeFile) :
		date_time, secs = str(datetime.now()).split(".")
		tipe = ConfigObj()
		tipe.filename = tipeFile
		tipe['System'] = {}
		tipe['Projects'] = {}
		tipe['System']['userName'] = 'Default User'
		tipe['System']['initDate'] = date_time
		tipe.write()


# Set the base program path
basePath = os.environ.get('TIPE_BASE')
if not basePath :
	basePath = os.path.join('usr', 'share', 'xetex-tipe')
	os.environ['TIPE_BASE'] = basePath

# Set the user environment path
userPath = os.environ.get('TIPE_USER')
if not userPath :
	sysHome = os.environ.get('HOME')
	userPath = os.path.join(sysHome, '.config', 'tipe')
	os.environ['TIPE_USER'] = basePath

# Run init to be safe in case something needs updating or is missing.
initUserHome(userPath)

# Before we get started we need to do some preliminary tests to see what the
# environment we are starting in looks like.  That will determine where we go
# from here.

# Set our paths to application resources
sys.path.insert(0, os.path.join(basePath, 'bin', 'python'))
sys.path.insert(0, os.path.join(basePath, 'bin', 'python', 'lib_system'))

# Now that our path is good we can load the local classes
from report import Report
report = Report()
from command import Command, commands
from project import Project

# Create a basic TIPE project object that will enable it to start
aProject = Project(os.getcwd(), userPath, basePath)

# Initialize reporting
report = Report(
	projLogFile         = os.path.join(aProject.projHome, aProject._sysConfig['FileNames']['projLogFile']) if aProject._sysConfig else None,
	projErrFile         = os.path.join(aProject.projHome, aProject._sysConfig['FileNames']['projErrorLogFile']) if aProject._sysConfig else None,
	debug               = aProject._sysConfig and aProject._sysConfig['System']['debugging'],
	projectName         = aProject.projectName)

# Do some cleanup like getting rid of the last sessions error log file.
if os.path.isfile(aProject.projErrorLogFile) :
	os.remove(aProject.projErrorLogFile)

# Give a welcome message
idCode = ''
if aProject.projectIDCode != '' :
	idCode = ' (' + aProject.projectIDCode + ')'

report.terminal('\n\t\tWelcome to TIPE ' + aProject.version)
report.terminal('\t\tCurrent User: ' + aProject.userName)
report.terminal('\t\tCurrent Project: ' + aProject.projectName + idCode + '\n')

# TIPE Command Line Syntax
# The tipe program can take numerious command.  Each command has two parts, a
# command name, and a set of 0 or more options.  A command option starts with
# "-" and is followed by a parameter.  If a wrong parameter is entered that will
# be caught by the command when it tries to run.
# They are:
#   tipe [command] [-optA param] [-optB param]
#
# Whereas:
# tipe          = the script name, which is always "tipe"
# [command]     = tipe command (none = manager)
# [-optA param] = A specified option and parameter
#
# If no command is given, then a list of commands will be given.  If the user
# wants specific help on a command they would type:
#   tipe command -help

command = ""
opts = []

if len(sys.argv) > 1 :
	command = sys.argv[1]
	opts = sys.argv[2:]
else :
	# If there isn't anything then we'll just go to the projects manager
	command = "help"
	report.terminal('Available commands:')



###############################################################################
##################### Prepare and Process TIPE Commands #######################
###############################################################################

# Run the command and pass along the aProject object
if command in commands :
	commands[command].run(aProject, opts)
else :
	report.terminal('ERROR: This command does not exist: ' + command)


## Write out all the current settings
aProject.writeProjConfFiles()

## Trim the project log file if needed
#aProject.trimLog(aProject.projLogLineLimit)

## Politely say good bye
report.terminal('\n\t\tThank you, please come again!\n')

