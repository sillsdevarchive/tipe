#!/usr/bin/python
# -*- coding: utf-8 -*-
# version: 20110610
# By Dennis Drescher (dennis_drescher at sil.org)


###############################################################################
######################### Description/Documentation ###########################
###############################################################################

# One script to rule them all.  This is the mother script of the whole system.
# This script will drive all processes and keep track of what happens in the
# project log in each respective project.

# History:
# 20110610 - djd - Initial draft


###############################################################################
################################## Load Modules ###############################
###############################################################################
# Firstly, import all the standard Python modules we need for this process and
# set the base path

import sys, os, codecs, shutil, operator


basePath = os.environ.get('TIPE_BASE')
if not basePath :
	basePath = "/usr/share/xetex-tipe"
	os.environ['TIPE_BASE'] = basePath

# Before we get started we need to do some preliminary tests to see what the
# environment we are starting in looks like.  That will determine where we go
# from here.

# Set our paths to application resources
sys.path.insert(0, basePath + '/bin/python')
sys.path.insert(0, basePath + '/bin/python/lib_system')

# Examine our command line.  The command line will have no more than three
# parameters.  The script name, which is always "tipe", followed by the command
# and then the component code, if a component is to be processed.  Otherwise,
# the command could be followed by a single parameter that the system will
# attempt to parse if the command is expecting more than one parameter.

command = ""
component = ""

if len(sys.argv) > 3 :
	print "Dude, you messed up your command line. Try again!"

elif len(sys.argv) > 1 :
	command = sys.argv[1]
	try :
		component = sys.argv[2]
	except :
		error = "bla bla bla"

else :
	command = "projects"


###############################################################################
########################## Define Script functions ############################
###############################################################################

def newProject () :
	'''Setup a new project'''

	project.makeProject(os.getcwd())


def render () :
	'''Render the current component.'''

	# First check our project setup and try to auto correct any problems that
	# might be caused from missing project assets.  This can include files
	# like.sty, .tex, .usfm, and folders, etc.
	if project.checkProject(os.getcwd()) :
		print "We have a project here"
	else :
		print "No project found"


	# Create the makefile for processing this particular component.  This is
	# done every time TIPE is run.




	# Run the makefile command to do the process.




	# Collect the results and report them in the log




	# If the process was successful we can do a little clean up.  Otherwise keep
	# the crime scene intact.





# Define more script functions here

###############################################################################
########################## Main Body of the Script ############################
###############################################################################

# Load up the shared modules we're going to need for all the commands
from project import *
project = Project()


if command == 'render' :
	render()

if command == 'new_project' :
	newProject()


# All done

print "\n\t\tThank you, please come again!\n"

