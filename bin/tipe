#!/usr/bin/python
# -*- coding: utf-8 -*-
# version: 20110704
# By Dennis Drescher (dennis_drescher at sil.org)


###############################################################################
######################### Description/Documentation ###########################
###############################################################################

# One script to rule them all.  This is the mother script of the whole system.
# This script will drive all processes and keep track of what happens in the
# project log in each respective project.

# History:
# 20110610 - djd - Start initial draft
# 20110704 - djd - Start refactor for multiple component types
# 20110721 - djd - Added proper command line processing
# 20110729 - djd - Removed TIPE system settings from project folder


###############################################################################
################################ Initialize TIPE ##############################
###############################################################################
# Firstly, import all the standard Python modules we need for this process and
# set the base path

import os, sys

# Set the TIPE base program path
tipeHome = os.environ.get('TIPE_BASE')
if not tipeHome :
	tipeHome = os.path.join('usr', 'share', 'xetex-tipe')
	os.environ['TIPE_BASE'] = tipeHome

# Set the user environment path
userHome = os.environ.get('TIPE_USER')
if not userHome :
	sysHome = os.environ.get('HOME')
	userHome = os.path.join(sysHome, '.config', 'tipe')
	os.environ['TIPE_USER'] = userHome

# Set the (potential) project home
projHome = os.getcwd()

# Set our paths to application resources
sys.path.insert(0, os.path.join(tipeHome, 'bin', 'python'))
sys.path.insert(0, os.path.join(tipeHome, 'bin', 'python', 'lib_system'))

# Load standard Python modules
import codecs, shutil, operator
from datetime import *
from configobj import ConfigObj

# Load the local classes
from tools import *
from sys_command import Command, commands
from project import Project

# Catch any incoming commands here
command = ""
opts = []

if len(sys.argv) > 1 :
	command = sys.argv[1]
	opts = sys.argv[2:]
else :
	# If there isn't anything then we'll just go to the projects manager
	command = "help"


###############################################################################
########################### Basic Startup Functions ###########################
###############################################################################

def initUserHome (userHome) :
	'''Dumb user home init function'''

	# Create core home paths
	tipeFile            = os.path.join(userHome, 'tipe.conf')
	resources           = os.path.join(userHome, 'resources')

	# Create home folders
	if not os.path.isdir(userHome) :
		os.mkdir(userHome)

	if not os.path.isdir(resources) :
		os.mkdir(resources)

	# Make the default global tipe.conf for custom environment settings
	if not os.path.isfile(tipeFile) :
		date_time = tStamp()
		tipe = ConfigObj()
		tipe.filename = tipeFile
		tipe['System'] = {}
		tipe['Folders'] = {}
		tipe['Projects'] = {}
		tipe['System']['userName'] = 'Default User'
		tipe['System']['initDate'] = date_time
		tipe['System']['writeOutUserConfFile'] = 'True'
		# Folder list
		folders = ['fonts', 'illustrations', 'admin', 'compTypes', 'projTypes']
		# System folders
		for f in folders :
			tipe['Folders']['tipe' + f] = os.path.join(tipeHome, 'resources', 'lib_' + f)
		# User (home) folders
		for f in folders :
			thisFolder = os.path.join(userHome, 'resources', 'lib_' + f)
			tipe['Folders']['user' + f] = thisFolder
			if not os.path.isdir(thisFolder) :
				os.mkdir(thisFolder)

		# Write out the user config file
		tipe.write()


###############################################################################
######################## Load User and Project Info ###########################
###############################################################################

# Check to see if the file is there, then read it in and break it into
# sections. If it fails, scream really loud!
tipeXML = os.path.join(tipeHome, 'bin', 'tipe.xml')
if os.path.exists(tipeXML) :
	sysXmlConfig = xml_to_section(tipeXML)
else :
	raise IOError, "Can't open " + tipeXML

# Now get the settings from the users global tipe.conf file
tipeUser = os.path.join(userHome, 'tipe.conf')
if not os.path.exists(tipeUser) :
	initUserHome(userHome)

# Load the conf file into an object
tipeConfig = ConfigObj(tipeUser)

# Look for any projects that might be registered and record them
try :
	tipeProjs = tipeConfig['Projects']
except :
	tipeProjs = None

# Create a new conf object based on all the XML default settings
# Then override them with any exsiting user settings.
userConfig = ConfigObj(sysXmlConfig.dict()).override(tipeConfig)

# Put back any project information that we might have lost from
# the XML/conf file merging.
if tipeProjs :
	userConfig['Projects'] = tipeProjs

# Load in project settings if they exist in the cwd
projConfFile = os.path.join(projHome, '.project.conf')
projType = None

# Check for existing project in the case of a create command
if command == 'create' and os.path.isfile(projConfFile) :
	terminal('Error: Project exsists. Cannot create a new project in this location.')
	sys.exit(1)

# Now create a fresh projConfig object
if os.path.isfile(projConfFile) :
	# Create a fresh merged version of the projConfig
	projConfig = mergeProjConfig(ConfigObj(projConfFile), projHome, userHome, tipeHome)
	# Fold in the projConfig into the aProject object
	aProject = Project(projConfig, userConfig, projHome, userHome, tipeHome)
	if not isRecordedProject(aProject.userConfFile, aProject.projectIDCode) :
		recordProject (aProject.userConfFile, aProject.projHome, aProject.projectName,
			aProject.projectType, aProject.projectIDCode, aProject.projectCreateDate)

else :
	# We only need a default project config object if we are creating a new one.
	if command == 'create' :
		c = 0
		for o in opts :
			if o == '-t' :
				projType = opts[c+1]

			c +=1

		if not projType :
			terminal('TIPE failed to load. No project type in create command.')
			sys.exit(1)

		# Load in the project type XML default settings
		projConfig = getDefaultProjSettings (projHome, userHome, tipeHome, projType)
		aProject = Project(projConfig, userConfig, projHome, userHome, tipeHome)

	else :
		# If there is no project and no desire to make one, we still need a
		# dummy projConfig object so we'll just make one up.
		projConfig = ConfigObj()
		aProject = Project(projConfig, userConfig, projHome, userHome, tipeHome)


###############################################################################
############################### Terminal Startup ##############################
###############################################################################

# Give a welcome message
terminal('\n\t\tWelcome to TIPE ' + aProject._userConfig['System']['systemVersion'])
terminal('\t\tCurrent User: ' + aProject._userConfig['System']['userName'])
if os.path.isfile(aProject.projConfFile) :
	terminal('\t\tCurrent Project: ' + aProject._projConfig['ProjectInfo']['projectName'] + ' (' + aProject._projConfig['ProjectInfo']['projectIDCode'] + ')')


###############################################################################
##################### Prepare and Process TIPE Commands #######################
###############################################################################

# Run the command and pass along the aProject object
if command in commands :
	if len(opts) > 0 :
		commands[command].run(opts, aProject, userConfig)
	else :
		commands[command].run(opts)
else :
	terminal('ERROR: This command does not exist: ' + command)


###############################################################################
########################### Closeout TIPE Session #############################
###############################################################################

# Now write out the config files if needed
writeConfFiles(aProject._userConfig, aProject._projConfig, userHome, projHome)

## Politely say good bye
terminal('\n\t\tThank you, please come again!\n')

