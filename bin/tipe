#!/usr/bin/python
# -*- coding: utf-8 -*-
# version: 20110610
# By Dennis Drescher (dennis_drescher at sil.org)


###############################################################################
######################### Description/Documentation ###########################
###############################################################################

# One script to rule them all.  This is the mother script of the whole system.
# This script will drive all processes and keep track of what happens in the
# project log in each respective project.

# History:
# 20110610 - djd - Start initial draft


###############################################################################
################################## Load Modules ###############################
###############################################################################
# Firstly, import all the standard Python modules we need for this process and
# set the base path

import sys, os, codecs, shutil, operator
from datetime import *
from configobj import ConfigObj


basePath = os.environ.get('TIPE_BASE')
if not basePath :
	basePath = "/usr/share/xetex-tipe"
	os.environ['TIPE_BASE'] = basePath

# Before we get started we need to do some preliminary tests to see what the
# environment we are starting in looks like.  That will determine where we go
# from here.

# Set our paths to application resources
sys.path.insert(0, basePath + '/bin/python')
sys.path.insert(0, basePath + '/bin/python/lib_system')

# Load the local classes
from project import Project

# Give a welcome message
aProject = Project(os.getcwd(), os.path.join(basePath, 'bin'))

# Do some cleanup like getting rid of the last sessions error log file.
if os.path.isfile(aProject.errorLogFile) :
	os.remove(aProject.errorLogFile)

aProject.terminal('\n\t\tWelcome to TIPE ' + aProject.version + '\n')

# Examine our command line.  The command line will have no more than three
# parameters.  The script name, which is always "tipe", followed by the command
# and then the component code, if a component is to be processed.  Otherwise,
# the command could be followed by a single parameter that the system will
# attempt to parse if the command is expecting more than one parameter.

command = ""
opts = []

if len(sys.argv) > 1 :
	command = sys.argv[1]
	opts = sys.argv[2:]
else :
	# If there isn't anything then we'll just go to the projects manager
	command = "manage"



###############################################################################
########################## Main Body of the Script ############################
###############################################################################


if command == 'help' and hasattr(aProject, "_command_" + opts[0]) :
	print getattr(aProject, "_command_" + opts[0]).__doc__
elif hasattr(aProject, "_command_" + command) :
	getattr(aProject, "_command_" + command)(opts)
else :
	aProject.terminal('ERROR: This command does not exist: ' + command)


# Write out all the current settings
aProject.writeConfFiles()

# Trim the project log file if needed
aProject.trimLog(aProject.logLineLimit)

# Politely say good bye
aProject.terminal('\n\t\tThank you, please come again!\n')

