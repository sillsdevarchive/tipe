Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.26
Creation-Date: Fri, 28 Aug 2009 14:44:38 +0700
Modification-Date: Fri, 19 Feb 2010 09:52:47 +0700

====== Repositories ======

Mercurial is the repository system of choice at this time. Though other systems like SVN can be used, ptxplus is geared toward the Mercurial system. There are several steps that are needed to setup a project from nothing. We will outline the steps here. Note that these instructions are made in the context of our palaso.org system. Your millage may vary.

===== Project ID =====
An important place to start is with the project Identifier (ID). It is important to use a meaningful and consistent ID in your system to help you organize your work. In MSEAG, for identification purposes, we try to organize projects by language, script and project ID. For the first two we use ISO language and writing system ID codes. The project ID can be anything but it is good to keep it brief. So, for example the ID ENG-LATN-BIBA project would be English written in the Latin script and this would be the first full Bible publication (in this environment). Try to remember this while setting your project up and do it the same way with all projects.

So now, the first thing you need to do is think up a project ID and write it down somewhere so you have it during the rest of the project setup.

===== Repository Creation =====
Actually, I have no idea how this is done. You need to go to your local administrator to have this done. Have him/her set up a Mercurial repository using the language ID as the name, for example, "eng".

===== Redmine Project Setup =====
For everything to work a project needs to be set up on the Redmine system. Without great detail as to how the website interface works, this is basically what needs to be done:

1) To begin the process go to the Language Forge project website at:

	https://projects.mseag.org

2) Create a project using the project ID you created above. Setup a main project area using the language ID code as a sub-project of "Typesetting". Remember, this project will contain all the publishing projects for that language.

3) Add members to your project. You may need to add members to the system as well so they can be added to the project. Add the people you need to start things going. You can always add more later.

4) Add the empty repository (made by your administrator) to the project. The SCM should be set to Mercurial and the URL should be something like this:

	[[/var/vcs/mseag.org_hg/eng]]

Where the "eng" is the language code for the project that you used to set it up earlier. Change it to suite your context. After you complete this, everything should be ready to work.

Of course for this all to work, you need to have administration privileges. If you do not, you will need to get them or find someone who has them.

===== Cloning A Project =====
If this is not a new project setup (covered below) you can clone an existing project from a repository. Assuming that you have [[TortoiseHg]] installed all you need to do is right-click and follow the instructions in the dialogs to follow. You will be asked to enter the path to the repository. In the MSEAG context that would look like this:

	https://hg.mseag.org/<project ID>

You will need to provide your user ID and password and point it to an existing folder. Once you do that it will make a copy of the repository version on your local file system.  //[Warning: Odd behavior has been seen with this operation in that after working for a bit it asks for your user ID and password again. If you do that it will put yet another copy inside the copy you just cloned. Just cancel the operation the second time it asks for that information and it should be okay. This bug may have been fixed by the time you read this.]//

===== New Project Setup =====
Once the above steps have been completed and you have a repository and project all setup, you need to set the project up on your local machine. These are the steps:

1) Inside the folder you use for working on your publishing projects, create a folder and name it with the language ID you are working with, just the language ID.

2) Create two folders inside the project folder, one named "Text", the other with the script and project IDs. For example "LATN-BIBA".

3) Once the folders are in place, they need to be populated with the initial data. In the Text folder put the source text for the project. In the project folder, e.g. "LATN-BIBA" begin a new ptxplus project and allow it to create all the initial data.

4) Next, open a terminal in the project folder at the text and project level. Then, enter these commands for Mercurial:

	hg init
	hg add
	hg commit -m "import"
	hg push https://hg.mseag.org/eng

Again, edit the project language as needed but once this is done, your initial project data will be pushed up to the repository. If it is necessary to have the source linked in from another repository the above instructions will need to be modified, but I'm not yet sure in what way. :-(

With all of this done you should be ready to push and pull data from your repository. As your project progresses you will want to include more files so none of your hard work is lost in the case of a data catastrophe.

===== Adding A Project =====
If you have an existing language project repository set up and you need to add a publishing project to it, do the following.

1) Create a project folder on the same level as the text folder. Use the same naming convention as described above, i.e. SCRIPT-PROJECT.
2) Set up a new publishing project in that folder with ptxplus.
3) In a terminal located in the root of the project, repeat step 4 in New Project Setup.

===== Tips For Working With TortoiseHg =====
You might have a problem with getting settings to work in TortoiseHG that involve the iniparse package. That is not in a normal repository and you can find it here:

	http://code.google.com/p/iniparse/

**Backing out of a mistake**
There is a way to back out of a situation where you might have committed too much material, i.e. large PDF files. By using HG Transplant and Strip you can move the committed work you need to save to another part of the branch, then use Strip to remove the part you don't need. To enable these modules you need to add them to your [[hgrc]] file with:

[extensions]
hgext.mq =
transplant=

**NOTE: **Move (copy out) all important files from affected areas of the project so if any are deleted that are needed, they will not be lost.

More info at: http://mercurial.selenic.com/wiki/Strip and http://mercurial.selenic.com/wiki/TransplantExtension Read the documentation for the right syntax as this has to be done at the command line. Be careful when you are doing this!
