#!/usr/bin/python
# -*- coding: utf-8 -*-
# version: 20110610
# By Dennis Drescher (dennis_drescher at sil.org)


###############################################################################
######################### Description/Documentation ###########################
###############################################################################

# One script to rule them all.  This is the mother script of the whole system.
# This script will drive all processes and keep track of what happens in the
# project log in each respective project.

# History:
# 20110610 - djd - Start initial draft


###############################################################################
################################## Load Modules ###############################
###############################################################################
# Firstly, import all the standard Python modules we need for this process and
# set the base path

import sys, os, codecs, shutil, operator
from datetime import *
from configobj import ConfigObj


basePath = os.environ.get('TIPE_BASE')
if not basePath :
	basePath = "/usr/share/xetex-tipe"
	os.environ['TIPE_BASE'] = basePath

# Before we get started we need to do some preliminary tests to see what the
# environment we are starting in looks like.  That will determine where we go
# from here.

# Set our paths to application resources
sys.path.insert(0, basePath + '/bin/python')
sys.path.insert(0, basePath + '/bin/python/lib_system')

# Load the local classes
from project import Project

# Give a welcome message
aProject = Project(os.getcwd(), os.path.join(basePath, 'bin'))

# Do some cleanup like getting rid of the last sessions error log file.
if os.path.isfile(aProject.errorLogFile) :
	os.remove(aProject.errorLogFile)

aProject.terminal('\n\t\tWelcome to TIPE ' + aProject.version + '\n')

# Examine our command line.  The command line will have no more than three
# parameters.  The script name, which is always "tipe", followed by the command
# and then the component code, if a component is to be processed.  Otherwise,
# the command could be followed by a single parameter that the system will
# attempt to parse if the command is expecting more than one parameter.

command = ""
opts = []

if len(sys.argv) > 1 :
	command = sys.argv[1]
	opts = sys.argv[2:]
else :
	# If there isn't anything then we'll just go to the projects manager
	command = "manage"


###############################################################################
########################## Define Script functions ############################
###############################################################################

def tipeManger (aProject, argv) :
	'''Start the TIPE Manager GUI'''

	aProject.terminal('SORRY: Manager GUI has not been implemented yet.')


def newProject (aProject, argv) :
	'''Setup a new project'''

	if aProject.makeProject(os.getcwd()) :
		aProject.writeToLog('MSG', 'Created new project at: ' + os.getcwd(), 'tipe.newProject()')
	else :
		aProject.writeToLog('ERR', 'Failed to created new project at: ' + os.getcwd(), 'tipe.newProject()')


def addComponent (aProject, argv) :
	'''Add a new component to the project.'''

	try :
		aProject.addNewComponent(argv[0])
	except :
		aProject.writeToLog('ERR', 'Failed to created new component, no ID code given', 'tipe.addComponent()')


def render (aProject, argv) :
	'''Render the current component.'''

	mod = 'tipe.render()'

	# First check our project setup and try to auto correct any problems that
	# might be caused from missing project assets.  This can include files
	# like.sty, .tex, .usfm, and folders, etc.
	if not aProject.checkProject(aProject.home) :
		aProject.writeToLog('ERR', 'No project found!', mod)
		return

	aDoc = aProject.getDoc(argv[0])
	if not aDoc :
		aProject.writeToLog('ERR', 'Component [' + argv[0] + '] not found in project', mod)
		return

	#FIXME: What does this next line do?
	aDoc.render()

	# Create the makefile for processing this particular component.  This is
	# done every time TIPE is run.
	if document.createMakefile(thisComponent, command) :
		if runMake() :
			aProject.writeToLog('MSG', 'Process completed successful!', mod)
		else :
			aProject.writeToLog('ERR', 'Process did not complete successfuly. Check logs for more information.', mod)

	# Collect the results and report them in the log

	return True


def runMake () :
	'''All component processes are expected to be run via makefile.  This is a
	generic makefile running function.'''

	# Send off the command return error code
	error = os.system(sysConfig['System']['makeStartParams'] + os.getcwd() + '/' + sysConfig['System']['makefileFile'])

	if error == 0 :
		return True
	else :
		report.terminal('ERROR: tipe.runMake: ' + str(error))
		return



# Define more script functions here

###############################################################################
########################## Main Body of the Script ############################
###############################################################################

# Load up the shared modules we're going to need for all the commands

if command == 'render' :
	render(aProject, opts)
elif command == 'new_project' :
	newProject(aProject, opts)
elif command == 'add_component' :
	addComponent(aProject, opts)
elif command == 'manage' :
	tipeManger(aProject, opts)
else :
	aProject.terminal('ERROR: This command does not exist: ' + command)


# Write out all the current settings
if aProject._sysConfig['System']['isProject'] :
	aProject._sysConfig.filename = aProject.projConfFile
	date_time, secs = str(datetime.now()).split(".")
	aProject._sysConfig['System']['projEditDate'] = date_time
	aProject._sysConfig.write()

# Trim the project log file if needed
aProject.trimLog(aProject.logLineLimit)

# Politely say good bye
aProject.terminal('\n\t\tThank you, please come again!\n')

